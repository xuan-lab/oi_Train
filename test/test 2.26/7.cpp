/*
【问题描述】
如果一个字符串中只包含字符 0 和字符 1，则称为一个 01 串（包含全为 0 的串和全为 1 的串）。

请问有多少个长度为 24 的 01 串，满足任意 5 个连续的位置中不超过 3 个位置的值为 1 。*/
#include <iostream>
using namespace std;
int main() {
    const int n = 24;
    int dp[n + 1][5][2] = {}; // dp[i][j][k]表示长度为i，末尾有j个1，末尾的字符为k(0或1)的01串的数量
    dp[0][0][0] = 1; // 初始化：长度为0，末尾没有1，末尾为0的01串数量为1
    for (int i = 1; i <= n; i++) {
        for (int j = 0; j < 5; j++) {
            // 当前位置放0
            dp[i][0][0] += dp[i - 1][j][0]; // 前一位是0，当前放0，连续1清零
            dp[i][0][0] += dp[i - 1][j][1]; // 前一位是1，当前放0，连续1清零
            
            // 当前位置放1
            if (j < 4) { // 确保连续1不超过4个
                dp[i][j + 1][1] += dp[i - 1][j][0]; // 前一位是0，当前放1，连续1数+1
                dp[i][j + 1][1] += dp[i - 1][j][1]; // 前一位是1，当前放1，连续1数+1
            }
        }
    }
    int ans = 0;
    for (int j = 0; j < 5; j++) {
        ans += dp[n][j][0] + dp[n][j][1];
    }
    cout << "满足条件的01串数量是: " << ans << endl;
    return 0;
}